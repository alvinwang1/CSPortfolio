#include <iostream>
#include <queue>
using namespace std;
int main(){
    int counter = 0;
    queue<int>row;
    queue<int>col;
    queue<int>jumps;
    int m, n, m1=1, m2=2;
    cin >> m >> n;
    char pond[m][n];
    bool evisit[m][n];
    bool ovisit[m][n];
    int curr, curc;
    int fx, fy;
    cin >> curr;
    cin >> curc >> fx >> fy;
    curr--;
    curc--;
    fx--;
    fy--;
  //  cout << fx << " "<< fy<<endl;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            evisit[i][j] = false;
            ovisit[i][j] = false;
            pond[i][j] = '.';
        }
    }
    pond[fx][fy] = 'A';
    row.push(curr);
    col.push(curc);
    jumps.push(0);
    /*
    for(int i = 0; i < m; ++i){
        for(int j = 0; j < n; ++j){
            cout << pond[i][j];
        }
        cout << endl;
    }
     */
    int r, c,j;
    while(!row.empty()){
        r = row.front();
        c = col.front();
        j = jumps.front();
        row.pop();
        col.pop();
        jumps.pop();
        if(r >= 0 && c >= 0 && r < m && c < n){
            //cout << r << " " << c <<" " << j <<endl;
            if(pond[r][c] == 'A'){
                cout<< j<< endl;
                //cout << "hiiii" << endl << row.size();
                return 0;
            }
            if(j%2==0&& !evisit[r][c]){
                //cout << "HIHIHHHI";
                evisit[r][c] = true;
                if(pond[r][c] == 'A'){
                  cout<< j<< endl;
                    //cout << "hiiii" << endl << row.size();
                    return 0;
                }
                row.push(r + m1);
                col.push(c + m2);
                jumps.push(j + 1);
                row.push(r - m1);
                col.push(c - m2);
                jumps.push(j + 1);
                row.push(r + m2);
                col.push(c + m1);
                jumps.push(j + 1);
                row.push(r - m2);
                col.push(c - m1);
                jumps.push(j + 1);
                row.push(r + m1);
                col.push(c - m2);
                jumps.push(j + 1);
                row.push(r - m1);
                col.push(c + m2);
                jumps.push(j + 1);
                row.push(r + m2);
                col.push(c - m1);
                jumps.push(j + 1);
                row.push(r - m2);
                col.push(c + m1);
                jumps.push(j + 1);
            }
        
        else if(j%2==1&& !ovisit[r][c]){
            ovisit[r][c] = true;
            if(pond[r][c] == 'A'){
               // cout << fx  << " " << fy << endl;
                //cout << r << " " << c << endl;
                cout<< j<< endl;
                for(int k = 0; k < m; ++k){
                    for(int l = 0; l < n; ++l){
                        cout << pond[k][l];
                    }
                    cout << endl;
                }
                //cout << "hiiii" << endl << row.size();
                return 0;
            }
            row.push(r + 2);
            col.push(c + 0);
            jumps.push(j + 1);
            row.push(r - 2);
            col.push(c - 0);
            jumps.push(j + 1);
            row.push(r + 0);
            col.push(c + 2);
            jumps.push(j + 1);
            row.push(r + 0);
            col.push(c - 2);
            jumps.push(j+1);
        }
        }
    }
}

